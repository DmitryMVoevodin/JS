- Подключить скрипт "script.js" на странице. После успешного подключения и перезагрузки страницы появится соответствующее сообщение. Затем слушатель может быть удален.
- ["1", 2, "3", "4", 5, null].forEach(function(param) {/*your code here*/})
Используя код выше добавить код для тела цикла. 
	Необходимо создать переменную и присвоить текущее значение param. 
	Вывести в консоль в виде "значение - тип". 
	Добавить switch от типа значения param. Если тип "строка", то присвоить любое числовое значение. Если число то любое строковое. Если неизвестный тип, то присвоить строковое значение "Неизвестный тип". Вывести в консоль новый тип переменной в виде "значение - тип".
Реализовать в двух вариантах, использую различные области видимости переменных. В первом значение переменной (объявленной внутри цикла) доступно после его окончания. Во втором варианте переменная не видна, при попытке обращения к ней в консоли должна появляться ошибка.
- Присвоить значение константной переменной и попробовать переопределить ее.
- Написать цикл с 5 итерациями. Внутри цикла инициализировать переменную типа "объект" с полем "имя" и значением null. Сделать проверку на четность итерации. Если итерация четная присвоить полю "имя" значение через оператор ".". Иначе через "[]". Присваивание сделать через "prompt". После конструкции условия вывести объект в консоль. Должно распечататься 5 объектов с введенными именами.
- ["1", "1", 1, 1].forEach(function(param, index) {/*your code here*/})
Добавить код сравнения соседних значений массива в цикл (0 стравнивается с 1ым, 1ый со 2ым, 2ой с 3им). Сравнение проводить сразу двумя операторами "==" и "===". Результат каждого сравнения выводить в консоль в виде "знач (тип) == знач (тип) ? результат" и "знач (тип) === знач (тип) ? результат".
- Создать функцию, которая выводит в консоль сообщение. Объявить новую переменную и присвоить ей ссылку на предыдущую фуннкцию. Вызвать функцию через вторую переменную.
- Объявить функцию с одним параметром. Функция должна возвращать функцию без входных параметров, которая печатает в консоль параметр внешней функции с сообщением "Internal function is called. External param: {значение параметра}".
Присвоить результат вызова внешней функции с параметром переменной. Вызвать функцию, лежащую в переменной. (Прим.: let intFunc = extFunc("Param"); intFunc();)
После вызова функции второй переменной в консоли должно распечататься сообщение и значение параметра, переданного в первую функцию.
- Проитерировать по всем дочерним узлам, внутри div с классом "container". Вывести название узла, тип и значение(при наличии).
- Проитерировать по всем элементам, внутри div с классом "container". Вывести название узла и тип. В этом случае количество узлов должно быть меньше чем в первом случае.
- Найти каждый из узлов имеющий идентификатор (с помощью поиска по идентификаторам).
- Найти каждый из узлов имеющий стилевой класс (Первый вариант - с помощью поиска по классам. Второй вариант - поиск по css селекторам(В качестве селектора также выступает класс)).
- Найти узлы с комбинацией из определенного идентификатора и класса.
- С помощью горизонтального и вертикального передвижения по узлам, дойти от узла <html> до узла с идентификатором "targetNode", используя перемещение либо по узлам либо по элементам (прим.: т.е. firstChild и firstElementChild). 
- Добавить 3 кнопки под таблицей в файле page.html. Выровнять по центру таблицы в один ряд. У каждой кнопки свой уникальный id и у каждой одинаковый класс стиля "btn". Объявить 3 функции различными способами, каждая должна выводить значение в alert отличное от двух других. Каждую функцию зарегистрировать как обработчик для одной из трех кнопок (1 кнопка - 1 обработчик). При нажатии на каждую кнопку должно выводиться соответствующее значение.
Регистрацию выполнить 3 путями. Первый - поиск кнопки по id. Второй, как будто идентификаторов нет, но все три можно найти по классу стилей "btn". Третий - нет ни идентификаторов, ни стилевых классов.
- Добавить еще три кнопки в файл page.html. Объявить функцию печатающую сообщение. 
Вторая кнопка должна добавлять слушателя для первой кнопки, используя данную функцию. Третья кнопка должна удалять слушателя для первой кнопки. При нажатии на первую кнопку вызывается функция описанная в первом шаге и распечатывает сообщение.
(Сценарий: при клике на первую кнопку ничего не происходит. Нажимается вторая кнопка. Нажимается певая кнопка, должно распечататься сообщение. Нажимается третья кнопка. Снова нажимается первая кнопка, сообщение не появляется. Т.е. при нажатии на 2ую и затем первую печатается сообщение. На 3ю и потом первую слушатель удаляется и ничего не печатается.) Для регистрации слушателей для кнопок использовать идентификаторы.
- Вывести в консоль протокол и путь текущей страницы, название браузера, размер экрана.



https://stackoverflow.com/questions/7935689/what-is-the-difference-between-children-and-childnodes-in-javascript